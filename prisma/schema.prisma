// This file contains the Prisma schema for the Esh7rni database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  payments      Payment[]
  notifications Notification[]
  credits       Credit[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Service {
  id          String   @id @default(cuid())
  serviceId   Int      @unique
  name        String
  category    String
  type        String
  rate        Float
  min         Int
  max         Int
  dripfeed    Boolean  @default(false)
  refill      Boolean  @default(false)
  description String?  @db.Text
  markup      Float    @default(20)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders Order[]
}

model Order {
  id          String   @id @default(cuid())
  userId      String
  serviceId   String
  link        String
  quantity    Int
  amount      Float
  status      String   @default("pending")
  apiOrderId  String?
  apiResponse String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Restrict)

  payments      Payment[]
  notifications Notification[]
}

model Payment {
  id               String   @id @default(cuid())
  userId           String
  orderId          String?
  amount           Float
  currency         String   @default("USD")
  method           String
  status           String   @default("pending")
  transactionId    String?
  paymentIntent    String?
  paymentResponse  String?  @db.Text
  creditAmount     Float?   // Amount of credits added (if credit purchase)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order? @relation(fields: [orderId], references: [id], onDelete: SetNull)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  content   String   @db.Text
  read      Boolean  @default(false)
  readAt    DateTime?
  orderId   String?
  status    String   @default("pending")
  metadata  String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order? @relation(fields: [orderId], references: [id], onDelete: SetNull)
}

model Credit {
  id            String   @id @default(cuid())
  userId        String
  amount        Float
  transactionId String?
  type          String   // "purchase", "usage", "refund", "bonus"
  description   String?
  orderId       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
